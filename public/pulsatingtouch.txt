    async public void StartPulsatingTouch(GameObject frogObj)
    {
        var frogPos = frogObj.GetComponent<RectTransform>();
     
        List<frogObject> neighbours = new List<frogObject>();
        List<frogObject> larger = new List<frogObject>();
        List<frogObject> lesser = new List<frogObject>();

        for (int i =0; i<frogs.Count; i++)
        {
            if (frogs[i].isActive && frogs[i].frogScript.clicked==false)
            {
                if (frogs[i].rectTransform.position.x >minimumDistancePoint.position.x)
                {
                    neighbours.Add(frogs[i]);
                }
               
            }
        }
        
        neighbours.Sort((a, b) => b.rectTransform.position.x.CompareTo(a.rectTransform.position.x));

        for(int i =0; i<neighbours.Count;i++)
        {
            if (neighbours[i].rectTransform.position.x>frogPos.position.x)
            {
                larger.Add(neighbours[i]);
            }
            else
            {
                lesser.Add(neighbours[i]);
            }
        }

        larger.Sort((a, b) => a.rectTransform.position.x.CompareTo(b.rectTransform.position.x));


        var count= (larger.Count>lesser.Count)? larger.Count: lesser.Count;
        for(int i = 0; i< count; i++)
        {
            if(i<larger.Count)
            {
                larger[i].frogScript.onClicked();

            }
            if (i<lesser.Count)
            {
                lesser[i].frogScript.onClicked();

            }
            await Awaitable.WaitForSecondsAsync(0.1f, destroyCancellationToken);
        }
        
    }